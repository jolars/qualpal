version: "3"

vars:
  BUILD_DIR: build
  WASM_BUILD_DIR: build/wasm
  TEST_DIR: test
  CMAKE_BUILD_FLAGS: --build {{.BUILD_DIR}} -j

interval: 500ms

tasks:
  default:
    deps: [configure, build]

  configure:
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

  debug-on:
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DCMAKE_BUILD_TYPE=Debug -DDAP_DEBUG=ON

  debug-off:
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DCMAKE_BUILD_TYPE=Debug -DDAP_DEBUG=OFF

  build:
    deps: [configure]
    cmds:
      - cmake {{.CMAKE_BUILD_FLAGS}}

  build-cli:
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DBUILD_CLI=ON
      - cmake {{.CMAKE_BUILD_FLAGS}}

  build-wasm:
    desc: Build WebAssembly version
    preconditions:
      - sh: command -v emcc
        msg: "Emscripten not found. Please install and source emsdk_env.sh"
    cmds:
      - echo "Building WebAssembly version..."
      - rm -rf {{.WASM_BUILD_DIR}}
      - mkdir -p ~/.emscripten_cache
      - mkdir -p {{.WASM_BUILD_DIR}}
      - export EM_CACHE=~/.emscripten_cache && emcmake cmake -B {{.WASM_BUILD_DIR}} -S . -DBUILD_WASM=ON -DCMAKE_BUILD_TYPE=Release
      - export EM_CACHE=~/.emscripten_cache && emmake make -C {{.WASM_BUILD_DIR}} qualpal_wasm
      - cp {{.BUILD_DIR}}/qualpal_wasm.* web/static/ 2>/dev/null || cp {{.BUILD_DIR}}/qualpal_wasm.* web/public/ 2>/dev/null || echo "Copy WASM files to web directory manually"
      - echo "✓ WebAssembly build complete! Files in {{.BUILD_DIR}}/wasm/ and copied to web/"

  plots:
    desc: Generate documentation plots using gnuplot
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DBUILD_VISUALIZATIONS=ON -DBUILD_TESTING=OFF -DBUILD_DOCS=OFF
      - cmake {{.CMAKE_BUILD_FLAGS}}
      - chmod +x docs/generate_plots.sh
      - cd {{.BUILD_DIR}} && bash "$(pwd)/../docs/generate_plots.sh"

  docs:
    deps: [plots]
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DBUILD_DOCS=ON -DBUILD_TESTING=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - cmake {{.CMAKE_BUILD_FLAGS}}

  coverage:
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DBUILD_DOCS=ON -DBUILD_TESTING=ON -DENABLE_COVERAGE=ON
      - cmake {{.CMAKE_BUILD_FLAGS}}
      - ctest --test-dir {{.BUILD_DIR}} --output-on-failure

  release:
    deps: [clean]
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF
      - task: build
      - task: install

  clean:
    cmds:
      - rm -rf {{.BUILD_DIR}}/*

  install:
    cmds:
      - cmake --install {{.BUILD_DIR}}

  install-cli: build-cli
    cmake --install $(BUILD_DIR) --component CLI

  test:
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DBUILD_CLI=ON -DBUILD_DOCS=OFF -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DENABLE_CLI_TESTS=ON
      - cmake {{.CMAKE_BUILD_FLAGS}}
      - ctest --test-dir {{.BUILD_DIR}} --output-on-failure

  benchmark:
    deps: [build]
    cmds:
      - ./build/tests [!benchmark] --benchmark-samples 20

  valgrind:
    desc: Run tests under Valgrind for memory checking
    cmds:
      - cmake -B {{.BUILD_DIR}} -S . -DBUILD_TESTING=ON
      - cmake {{.CMAKE_BUILD_FLAGS}}
      - valgrind --leak-check=full --error-exitcode=1 ./{{.BUILD_DIR}}/tests

  dev:
    desc: Start Svelte development server
    dir: web
    cmds:
      - npm run dev

  build-web:
    desc: Build Svelte app for production
    deps: [build:wasm]
    dir: web
    cmds:
      - npm run build
      - echo "✓ Web app built! Files in web/dist/"

  clean-web:
    desc: Clean web build artifacts
    dir: web
    cmds:
      - rm -rf dist node_modules/.vite
      - echo "Web build artifacts cleaned"

  clean-all:
    desc: Clean all build artifacts
    deps: [clean, clean:wasm, clean:web]
    cmds:
      - echo "All build artifacts cleaned"

  paper:
    desc: Build JOSS paper locally
    watch: true
    sources:
      - "paper/paper.md"
      - "paper/paper.bib"
    cmds:
      - |
        docker run --rm \
          --volume $PWD/paper:/data \
          --user $(id -u):$(id -g) \
          --env JOURNAL=joss \
          openjournals/inara
      - echo "Paper built!"
      - xdg-open paper/paper.pdf || echo "Could not open PDF automatically"
      - echo "Watching for changes"
