name: Build-and-test

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, macos-13]
      fail-fast: false
    steps:
      - uses: actions/checkout@v5

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
            build-essential \
            catch2

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install eigen catch2

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install mingw
          vcpkg install catch2 --triplet x64-mingw-dynamic

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: "3.25"

      - name: Configure CMake
        run: cmake -B build -S . -DBUILD_CLI=ON -DBUILD_TESTING=ON ${{ runner.os == 'Windows' && '-G "MinGW Makefiles" -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-mingw-dynamic' || '' }}

      - name: Build
        run: cmake --build build

      - name: Install
        run: ${{ runner.os == 'Windows' && 'cmake --install build' || 'sudo cmake --install build' }}

      - name: Test
        run: ctest --test-dir build --output-on-failure

  test-packaging:
    name: Test package building
    strategy:
      matrix:
        ubuntu-version: [ubuntu-latest, ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.ubuntu-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm build-essential

      - name: Show system information
        run: |
          echo "System information for ${{ matrix.ubuntu-version }}:"
          echo "Kernel: $(uname -r)"
          echo "Architecture: $(uname -m)"  
          echo "Ubuntu version: $(lsb_release -d)"
          echo "CMake version: $(cmake --version | head -1)"
          echo "GCC version: $(gcc --version | head -1)"
          echo "Available package tools:"
          which dpkg-deb && echo "✅ dpkg-deb available" || echo "❌ dpkg-deb missing"
          which rpm && echo "✅ rpm available" || echo "❌ rpm missing"
          which rpmbuild && echo "✅ rpmbuild available" || echo "❌ rpmbuild missing"

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: "3.25"

      - name: Configure CMake
        run: cmake -B build -S . -DBUILD_CLI=ON -DCMAKE_BUILD_TYPE=Release

      - name: Verify CPack configuration
        run: |
          cd build
          echo "Testing CPack configuration..."
          cpack --help > /dev/null && echo "✅ CPack available"
          echo "Available CPack generators:"
          cpack --help | grep -A 20 "Generators" | tail -15
          echo "Testing CPack configuration parsing..."
          cpack --config CPackConfig.cmake --help > /dev/null && echo "✅ CPack config valid" || echo "⚠️ CPack config issue"

      - name: Build
        run: cmake --build build

      - name: Test CLI functionality
        run: |
          echo "Testing CLI help:"
          ./build/qualpal --help
          echo "Testing CLI with sample colors:"
          ./build/qualpal -n 3 "#ff0000" "#00ff00" "#0000ff" || echo "CLI test completed"

      - name: Test install rules
        run: |
          echo "Testing install rules..."
          cd build
          # Test install to a temporary directory
          mkdir -p /tmp/qualpal-test-install
          cmake --install . --prefix /tmp/qualpal-test-install
          echo "Installed files:"
          find /tmp/qualpal-test-install -type f | sort
          echo
          echo "Verifying expected files:"
          test -f /tmp/qualpal-test-install/bin/qualpal && echo "✅ CLI binary installed" || echo "❌ CLI binary missing"
          test -f /tmp/qualpal-test-install/lib/libqualpal.a && echo "✅ Static library installed" || echo "❌ Static library missing" 
          test -d /tmp/qualpal-test-install/include/qualpal && echo "✅ Headers installed" || echo "❌ Headers missing"
          test -d /tmp/qualpal-test-install/lib/cmake/qualpal && echo "✅ CMake config installed" || echo "❌ CMake config missing"
          echo "Cleaning up test install..."
          rm -rf /tmp/qualpal-test-install

      - name: Generate DEB packages
        run: |
          cd build
          echo "Generating DEB packages..."
          cpack -G DEB
          echo "Generated DEB packages:"
          ls -la *.deb

      - name: Generate RPM packages
        run: |
          cd build
          echo "Generating RPM packages..."
          cpack -G RPM
          echo "Generated RPM packages:"
          ls -la *.rpm

      - name: Generate cross-platform packages
        run: |
          cd build
          echo "Generating TGZ package..."
          cpack -G TGZ
          echo "Generated TGZ package:"
          ls -la *.tar.gz

      - name: Validate DEB package metadata
        run: |
          echo "Validating DEB package metadata:"
          for deb in build/*.deb; do
            if [ -f "$deb" ]; then
              echo "=== $(basename "$deb") ==="
              dpkg-deb --info "$deb" | head -15
              echo "Package contents:"
              dpkg-deb --contents "$deb" | head -5
              echo
            fi
          done

      - name: Test package installation (dry run)
        run: |
          echo "Testing package dependencies:"
          for deb in build/*.deb; do
            if [ -f "$deb" ]; then
              echo "Checking $(basename "$deb"):"
              # Test that dpkg can read the package without installing
              dpkg-deb --info "$deb" > /dev/null && echo "✅ Package format valid" || echo "❌ Package format invalid"
            fi
          done

      - name: Comprehensive package validation
        run: |
          echo "Running comprehensive package validation..."
          ./scripts/validate-packages.sh

      - name: Test package contents and dependencies
        run: |
          echo "Testing package contents and dependencies:"

          # Test that DEB packages have correct dependencies
          for deb in build/*.deb; do
            if [ -f "$deb" ]; then
              echo "=== Dependencies for $(basename "$deb") ==="
              dpkg-deb --field "$deb" Depends || echo "No dependencies"
              echo
            fi
          done

          # Test that RPM packages have correct format
          for rpm in build/*.rpm; do
            if [ -f "$rpm" ]; then
              echo "=== Info for $(basename "$rpm") ==="
              rpm -qip "$rpm" | head -10
              echo
            fi
          done

          # Test that we can extract and examine the TGZ
          for tgz in build/*.tar.gz; do
            if [ -f "$tgz" ]; then
              echo "=== Contents of $(basename "$tgz") ==="
              tar -tzf "$tgz" | head -20
              echo
            fi
          done

  docs:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies
        run: sudo apt-get install -y build-essential doxygen graphviz

      - uses: actions/setup-python@v6

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0
        with:
          cmake-version: "3.25"

      - name: Configure CMake
        run: cmake -B build -S . -DBUILD_DOCS=ON -DBUILD_TESTING=OFF -DBUILD_CLI=ON

      - name: Build
        run: cmake --build build
