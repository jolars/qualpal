<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="math_8h" kind="file" language="C++">
    <compoundname>math.h</compoundname>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">numeric</includes>
    <includes local="no">vector</includes>
    <includedby refid="objectives_8cpp" local="yes">/home/gerd-jln/projects/libslope/src/slope/objectives.cpp</includedby>
    <includedby refid="regularization__sequence_8cpp" local="yes">/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.cpp</includedby>
    <includedby refid="regularization__sequence_8h" local="yes">/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.h</includedby>
    <includedby refid="slope__threshold_8cpp" local="yes">/home/gerd-jln/projects/libslope/src/slope/slope_threshold.cpp</includedby>
    <includedby refid="sorted__l1__norm_8h" local="yes">/home/gerd-jln/projects/libslope/src/slope/sorted_l1_norm.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/gerd-jln/projects/libslope/src/slope/math.h</label>
        <link refid="math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Core</label>
      </node>
      <node id="3">
        <label>numeric</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceslope">slope</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">slope<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">sign(T<sp/>val)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(T(0)<sp/>&lt;<sp/>val)<sp/>-<sp/>(val<sp/>&lt;<sp/>T(0));</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">Eigen::ArrayXd</highlight></codeline>
<codeline lineno="18"><highlight class="normal">cumSum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>cum_sum(x.size());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>std::partial_sum(</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>x.data(),<sp/>x.data()<sp/>+<sp/>x.size(),<sp/>cum_sum.begin(),<sp/>std::plus&lt;double&gt;());</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>Eigen::Map&lt;Eigen::ArrayXd&gt;<sp/>out(cum_sum.data(),<sp/>cum_sum.size());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">T</highlight></codeline>
<codeline lineno="31"><highlight class="normal">sigmoid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0<sp/>/<sp/>(1.0<sp/>+<sp/>std::exp(-x));</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">T</highlight></codeline>
<codeline lineno="38"><highlight class="normal">clamp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>hi)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>lo<sp/>?<sp/>lo<sp/>:<sp/>x<sp/>&gt;<sp/>hi<sp/>?<sp/>hi<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>slope</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/gerd-jln/projects/libslope/src/slope/math.h"/>
  </compounddef>
</doxygen>
