<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="namespaceslope" kind="namespace" language="C++">
    <compoundname>slope</compoundname>
    <innerclass refid="classslope_1_1Binomial" prot="public">slope::Binomial</innerclass>
    <innerclass refid="classslope_1_1Clusters" prot="public">slope::Clusters</innerclass>
    <innerclass refid="classslope_1_1Gaussian" prot="public">slope::Gaussian</innerclass>
    <innerclass refid="classslope_1_1Objective" prot="public">slope::Objective</innerclass>
    <innerclass refid="structslope_1_1Results" prot="public">slope::Results</innerclass>
    <innerclass refid="classslope_1_1SortedL1Norm" prot="public">slope::SortedL1Norm</innerclass>
    <innerclass refid="structslope_1_1ThresholdingResults" prot="public">slope::ThresholdingResults</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="cd_8h_1a4c391d5d5c2224464493a9c827e5f24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void slope::coordinateDescent</definition>
        <argsstring>(double &amp;beta0, Eigen::VectorXd &amp;beta, Eigen::VectorXd &amp;residual, Clusters &amp;clusters, const T &amp;x, const Eigen::VectorXd &amp;w, const Eigen::VectorXd &amp;z, const SortedL1Norm &amp;sl1_norm, const Eigen::VectorXd &amp;x_centers, const Eigen::VectorXd &amp;x_scales, bool intercept, bool standardize, bool update_clusters, int print_level)</argsstring>
        <name>coordinateDescent</name>
        <qualifiedname>slope::coordinateDescent</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>beta0</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="classslope_1_1Clusters" kindref="compound">Clusters</ref> &amp;</type>
          <declname>clusters</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classslope_1_1SortedL1Norm" kindref="compound">SortedL1Norm</ref> &amp;</type>
          <declname>sl1_norm</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_centers</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_scales</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>intercept</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>update_clusters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>print_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/cd.h" line="13" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/cd.h" bodystart="13" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="math_8h_1a420a96a486308dbeac1286a0165e918f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int slope::sign</definition>
        <argsstring>(T val)</argsstring>
        <name>sign</name>
        <qualifiedname>slope::sign</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/math.h" line="11" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/math.h" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="math_8h_1a52a6a9c147a2cf1493cd7bde43a23bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::ArrayXd</type>
        <definition>Eigen::ArrayXd slope::cumSum</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>cumSum</name>
        <qualifiedname>slope::cumSum</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/math.h" line="18" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/math.h" bodystart="18" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="math_8h_1a63d8612dcd0ef1d6bfa88996c18f17bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T slope::sigmoid</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>sigmoid</name>
        <qualifiedname>slope::sigmoid</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/math.h" line="31" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/math.h" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="math_8h_1a279622f264abf0f023ed7a9126e052ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T slope::clamp</definition>
        <argsstring>(const T &amp;x, const T &amp;lo, const T &amp;hi)</argsstring>
        <name>clamp</name>
        <qualifiedname>slope::clamp</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/math.h" line="38" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/math.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="objectives_8cpp_1a6466319f0521a967f64395e88ee73f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classslope_1_1Objective" kindref="compound">Objective</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Objective &gt; slope::setupObjective</definition>
        <argsstring>(const std::string family)</argsstring>
        <name>setupObjective</name>
        <qualifiedname>slope::setupObjective</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>family</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/objectives.cpp" line="45" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/objectives.cpp" bodystart="45" bodyend="52" declfile="/home/gerd-jln/projects/libslope/src/slope/objectives.h" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="pgd_8h_1a504bf3388d4a09fe03865f508c8992fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void slope::proximalGradientDescent</definition>
        <argsstring>(double &amp;beta0, Eigen::VectorXd &amp;beta, Eigen::VectorXd &amp;residual, double &amp;learning_rate, const T &amp;x, const Eigen::VectorXd &amp;w, const Eigen::VectorXd &amp;z, const SortedL1Norm &amp;sl1_norm, const Eigen::VectorXd &amp;x_centers, const Eigen::VectorXd &amp;x_scales, double g_old, bool intercept, bool standardize, double learning_rate_decr, int print_level)</argsstring>
        <name>proximalGradientDescent</name>
        <qualifiedname>slope::proximalGradientDescent</qualifiedname>
        <param>
          <type>double &amp;</type>
          <declname>beta0</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>residual</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>learning_rate</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classslope_1_1SortedL1Norm" kindref="compound">SortedL1Norm</ref> &amp;</type>
          <declname>sl1_norm</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_centers</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_scales</declname>
        </param>
        <param>
          <type>double</type>
          <declname>g_old</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>intercept</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>learning_rate_decr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>print_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/pgd.h" line="11" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/pgd.h" bodystart="11" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="qnorm_8cpp_1afe1f4f8316224f6526656121fe5c1665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double slope::normalQuantile</definition>
        <argsstring>(const double p)</argsstring>
        <name>normalQuantile</name>
        <qualifiedname>slope::normalQuantile</qualifiedname>
        <param>
          <type>const double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the quantile of a standard normal distribution using the Beasley-Springer-Moro algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Quantile </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/qnorm.cpp" line="7" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/qnorm.cpp" bodystart="7" bodyend="56" declfile="/home/gerd-jln/projects/libslope/src/slope/qnorm.h" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="regularization__sequence_8cpp_1a366b0cb233f08202e6732e36553690d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::ArrayXd</type>
        <definition>Eigen::ArrayXd slope::lambdaSequence</definition>
        <argsstring>(const int p, const double q)</argsstring>
        <name>lambdaSequence</name>
        <qualifiedname>slope::lambdaSequence</qualifiedname>
        <param>
          <type>const int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a BH sequence of lambda values.</para>
<para>This function generates a sequence of lambda values based on the given parameters based on the Benjamini-Hochberg sequence for SLOPE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lambda values to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The quantile value used in the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An Eigen::ArrayXd containing the generated lambda values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.cpp" line="9" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.cpp" bodystart="9" bodyend="18" declfile="/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.h" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="regularization__sequence_8h_1a8c8e855915c37bf4eccbc20bf9ab921c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::ArrayXd</type>
        <definition>Eigen::ArrayXd slope::regularizationPath</definition>
        <argsstring>(const T &amp;x, const Eigen::VectorXd &amp;w, const Eigen::VectorXd &amp;z, const Eigen::VectorXd &amp;x_centers, const Eigen::VectorXd &amp;x_scales, const SortedL1Norm &amp;penalty, int path_length, double alpha_min_ratio, bool intercept, bool standardize)</argsstring>
        <name>regularizationPath</name>
        <qualifiedname>slope::regularizationPath</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_centers</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_scales</declname>
        </param>
        <param>
          <type>const <ref refid="classslope_1_1SortedL1Norm" kindref="compound">SortedL1Norm</ref> &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>int</type>
          <declname>path_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha_min_ratio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>intercept</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.h" line="26" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/regularization_sequence.h" bodystart="26" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="slope_8h_1a736a18883c137f4dc533a525046808dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double slope::computeMaxDelta</definition>
        <argsstring>(const T &amp;x, const Eigen::VectorXd &amp;x_centers, const Eigen::VectorXd &amp;x_scales, const Eigen::VectorXd &amp;w, const Eigen::VectorXd &amp;beta_old, const Eigen::VectorXd &amp;beta, bool standardize)</argsstring>
        <name>computeMaxDelta</name>
        <qualifiedname>slope::computeMaxDelta</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_centers</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_scales</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>beta_old</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>standardize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the maximum delta value for the given inputs.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the input data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_centers</parametername>
</parameternamelist>
<parameterdescription>
<para>The centers of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_scales</parametername>
</parameternamelist>
<parameterdescription>
<para>The scales of the input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta_old</parametername>
</parameternamelist>
<parameterdescription>
<para>The old beta values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>The new beta values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standardize</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to standardize the data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum delta value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/slope.h" line="35" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/slope.h" bodystart="35" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="slope_8h_1a98c11dab8a5415a73e1c74d7866528cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structslope_1_1Results" kindref="compound">Results</ref></type>
        <definition>Results slope::slope</definition>
        <argsstring>(const T &amp;x, const Eigen::MatrixXd &amp;y, Eigen::ArrayXd alpha=Eigen::ArrayXd::Zero(0), Eigen::ArrayXd lambda=Eigen::ArrayXd::Zero(0), const std::string objective_choice=&quot;gaussian&quot;, bool intercept=true, bool standardize=true, int path_length=100, double alpha_min_ratio=1e-4, int pgd_freq=10, double tol=1e-8, int max_it=1e6, int max_it_outer=100, bool update_clusters=false, int print_level=0)</argsstring>
        <name>slope</name>
        <qualifiedname>slope::slope</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Eigen::ArrayXd</type>
          <declname>alpha</declname>
          <defval>Eigen::ArrayXd::Zero(0)</defval>
        </param>
        <param>
          <type>Eigen::ArrayXd</type>
          <declname>lambda</declname>
          <defval>Eigen::ArrayXd::Zero(0)</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>objective_choice</declname>
          <defval>&quot;gaussian&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>intercept</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>standardize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>path_length</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>double</type>
          <declname>alpha_min_ratio</declname>
          <defval>1e-4</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pgd_freq</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
          <defval>1e-8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_it</declname>
          <defval>1e6</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_it_outer</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>update_clusters</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>print_level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the slope coefficients for a linear regression model using the <ref refid="classslope_1_1SortedL1Norm" kindref="compound">SortedL1Norm</ref> regularization.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the input matrix x. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix of size n x p, where n is the number of observations and p is the number of predictors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The response matrix of size n x 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The regularization parameter sequence. If not provided, it will be generated automatically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>The regularization parameter for the <ref refid="classslope_1_1SortedL1Norm" kindref="compound">SortedL1Norm</ref> regularization. If not provided, it will be set to zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objective_choice</parametername>
</parameternamelist>
<parameterdescription>
<para>The choice of objective function. Default is &quot;gaussian&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intercept</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to fit an intercept term. Default is true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>standardize</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to standardize the predictors. Default is true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of steps in the regularization path. Default is 100. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha_min_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum ratio of alpha to the maximum alpha value. Default is 1e-4. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pgd_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency of running the proximal gradient descent algorithm. Default is 10. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance for convergence. Default is 1e-8. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_it</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of iterations for the inner loop. Default is 1e6. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_it_outer</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of iterations for the outer loop. Default is 100. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update_clusters</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to update the clusters during coordinate descent. Default is false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity for printing debug information. Default is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The slope coefficients, intercept values, and primal values for each step in the regularization path. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/slope.h" line="102" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/slope.h" bodystart="102" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="slope__threshold_8cpp_1a50d1551b52dd0a445802b8c47e0993d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structslope_1_1ThresholdingResults" kindref="compound">ThresholdingResults</ref></type>
        <definition>ThresholdingResults slope::slopeThreshold</definition>
        <argsstring>(const double x, const int j, const Eigen::ArrayXd lambdas, const Clusters &amp;clusters)</argsstring>
        <name>slopeThreshold</name>
        <qualifiedname>slope::slopeThreshold</qualifiedname>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const Eigen::ArrayXd</type>
          <declname>lambdas</declname>
        </param>
        <param>
          <type>const <ref refid="classslope_1_1Clusters" kindref="compound">Clusters</ref> &amp;</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/slope_threshold.cpp" line="8" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/slope_threshold.cpp" bodystart="8" bodyend="72" declfile="/home/gerd-jln/projects/libslope/src/slope/slope_threshold.h" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="standardize_8cpp_1a4b4f958f3e0e9d0cbfe4dbd7f5f06266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</type>
        <definition>std::pair&lt; Eigen::VectorXd, Eigen::VectorXd &gt; slope::computeMeanAndStdDev</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x)</argsstring>
        <name>computeMeanAndStdDev</name>
        <qualifiedname>slope::computeMeanAndStdDev</qualifiedname>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/standardize.cpp" line="6" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/standardize.cpp" bodystart="6" bodyend="20" declfile="/home/gerd-jln/projects/libslope/src/slope/standardize.h" declline="8" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="standardize_8cpp_1a8c65b78f87fc39b764ba1af7103b41fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</type>
        <definition>std::pair&lt; Eigen::VectorXd, Eigen::VectorXd &gt; slope::computeMeanAndStdDev</definition>
        <argsstring>(const Eigen::SparseMatrix&lt; double &gt; &amp;x)</argsstring>
        <name>computeMeanAndStdDev</name>
        <qualifiedname>slope::computeMeanAndStdDev</qualifiedname>
        <param>
          <type>const Eigen::SparseMatrix&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/standardize.cpp" line="23" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/standardize.cpp" bodystart="23" bodyend="39" declfile="/home/gerd-jln/projects/libslope/src/slope/standardize.h" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="standardize_8cpp_1a48daefd09f392d76e6f28a67f852c13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, Eigen::VectorXd &gt;</type>
        <definition>std::pair&lt; double, Eigen::VectorXd &gt; slope::unstandardizeCoefficients</definition>
        <argsstring>(double beta0, Eigen::VectorXd beta, const Eigen::VectorXd &amp;x_means, const Eigen::VectorXd &amp;x_stddevs, const bool intercept)</argsstring>
        <name>unstandardizeCoefficients</name>
        <qualifiedname>slope::unstandardizeCoefficients</qualifiedname>
        <param>
          <type>double</type>
          <declname>beta0</declname>
        </param>
        <param>
          <type>Eigen::VectorXd</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_means</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x_stddevs</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>intercept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/standardize.cpp" line="42" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/standardize.cpp" bodystart="42" bodyend="61" declfile="/home/gerd-jln/projects/libslope/src/slope/standardize.h" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1adbd04eb3f0dc03a24803a6251b4d5f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void slope::sort</definition>
        <argsstring>(T &amp;v, const bool descending=false)</argsstring>
        <name>sort</name>
        <qualifiedname>slope::sort</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>descending</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/utils.h" line="12" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/utils.h" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1aa5b3dbb07b901089a6c9e0f972df4b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; slope::sortIndex</definition>
        <argsstring>(T &amp;v, const bool descending=false)</argsstring>
        <name>sortIndex</name>
        <qualifiedname>slope::sortIndex</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>descending</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/utils.h" line="23" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/utils.h" bodystart="23" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1ad5079427ef5af61e49c1913d281f5081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void slope::permute</definition>
        <argsstring>(T &amp;values, const std::vector&lt; int &gt; &amp;ind)</argsstring>
        <name>permute</name>
        <qualifiedname>slope::permute</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/utils.h" line="41" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/utils.h" bodystart="41" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1af7c876f9e801816b09eeb34d3a224eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void slope::inversePermute</definition>
        <argsstring>(T &amp;values, const std::vector&lt; int &gt; &amp;ind)</argsstring>
        <name>inversePermute</name>
        <qualifiedname>slope::inversePermute</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/utils.h" line="53" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/utils.h" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a3ccf6d9fc1fba0ab5248273171f8fd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void slope::move_elements</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v, const int from, const int to, const int size)</argsstring>
        <name>move_elements</name>
        <qualifiedname>slope::move_elements</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gerd-jln/projects/libslope/src/slope/utils.h" line="65" column="1" bodyfile="/home/gerd-jln/projects/libslope/src/slope/utils.h" bodystart="65" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/gerd-jln/projects/libslope/src/slope/cd.h" line="9" column="1"/>
  </compounddef>
</doxygen>
